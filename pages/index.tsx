/* eslint-disable @next/next/no-img-element */
import Head from 'next/head'
import { useEffect, useState } from 'react'
import { motion as m, useMotionValue, useSpring } from 'framer-motion'
import Link from 'next/link';
import { AiFillInstagram } from 'react-icons/ai'
import { BsFacebook } from 'react-icons/bs'
import { SiYoutubemusic } from 'react-icons/si'
import { author } from '../static/author';

const draw = {
  hidden: { pathLength: 0, opacity: 0 },
  visible: (i: number) => {
    const delay = 1 + i * 0.5;
    return {
      pathLength: 1,
      opacity: 1,
      transition: {
        pathLength: { delay, type: "spring", duration: 1.5, bounce: 0 },
        opacity: { delay, duration: 0.01 }
      }
    };
  }
};

export default function Home() {
  const [play, setPlay] = useState(false)

  const cursorX = useMotionValue(-200)
  const cursorY = useMotionValue(-200)

  const springConfig = { damping: 25, stiffness: 700 };
  const cursorXSpring = useSpring(cursorX, springConfig);
  const cursorYSpring = useSpring(cursorY, springConfig);

  useEffect(() => {
    const moveCursor = (e: MouseEvent) => {
      cursorX.set(e.clientX + 8)
      cursorY.set(e.clientY + 8)
    }
    window.addEventListener('mousemove', moveCursor)
    return () => {
      window.removeEventListener('mousemove', moveCursor)
    }
  }, [cursorX, cursorY])

  const toggleVideo = () => {
    const video = document.getElementById('jhonny') as HTMLVideoElement
    const playButton = document.getElementById('playButton') as HTMLButtonElement
    const decoration = document.querySelector('.decoration') as HTMLDivElement

    if (!video || !playButton) return;

    if (video.paused) {
      video.play()
      setPlay(true)
      decoration.classList.add('active')
    } else {
      video.pause()
      setPlay(false)
      decoration.classList.remove('active')
    }
  }

  const [width, setWidth] = useState(0);

  function handleWindowSizeChange() {
    if (typeof window !== 'undefined') {
      setWidth(window.innerWidth);
    }
  }

  useEffect(() => {
    window.addEventListener('resize', handleWindowSizeChange);
    return () => {
      window.removeEventListener('resize', handleWindowSizeChange);
    }
  }, []);

  const isMobile = width <= 768;

  return (
    <>
      <Head>
        <title>Jhonny Santanna</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="container">
        {!isMobile && (
          <m.div
            className="cursor"
            style={{
              translateX: cursorXSpring,
              translateY: cursorYSpring,
            }}
          />
        )}
        <header>
          <div className='logo'>
            <h1>Jhonny Santanna</h1>
          </div>
          <div className='decoration'>
            <div className='doted start'></div>
            <div className='doted start'></div>
            <div className='doted start'></div>
            <div className='doted end'></div>
            <div className='doted end'></div>
            <div className='doted end'></div>
          </div>
        </header>

        <main>
          <figure>
            <div className='gradient radial-gradient'></div>
            <div className='gradient gradient-1'></div>
            <div className='gradient gradient-2'></div>
            <video id="jhonny" autoPlay={true} loop muted={false} preload="auto" poster="video-thumb.png" src="Camisa-Manchada.mp4"></video>
            <div className='play' onClick={toggleVideo}>
              <m.button id="playButton">
                {!play && (
                  <m.svg
                    initial="hidden"
                    animate="visible"
                    xmlns="http://www.w3.org/2000/svg"
                    width="44"
                    height="44"
                    viewBox="0 0 24 24"
                    strokeWidth="1.5"
                    stroke="#ffffff"
                    fill="none"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                  >
                    <m.path variants={draw} stroke="none" d="M0 0h24v24H0z" fill="none" />
                    <m.path variants={draw} d="M7 4v16l13 -8z" />
                  </m.svg>
                )}
                {play && (
                  <m.svg
                    initial="hidden"
                    animate="visible"
                    xmlns="http://www.w3.org/2000/svg"
                    width="44"
                    height="44"
                    viewBox="0 0 24 24"
                    strokeWidth="1.5"
                    stroke="#ffffff"
                    fill="none"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                  >
                    <m.path variants={draw} stroke="none" d="M0 0h24v24H0z" fill="none" />
                    <m.rect variants={draw} x="6" y="5" width="4" height="14" rx="1" />
                    <m.rect variants={draw} x="14" y="5" width="4" height="14" rx="1" />
                  </m.svg>
                )}
              </m.button>
            </div>
            <div className='content'>
              <h1>Jhonny Santanna</h1>
              <p>Cantor & Compositor</p>
            </div>
          </figure>
        </main>

        <footer>
          <nav className='info'>
            <Link href="/music">MÃºsica</Link>
            <Link href="/event">Eventos</Link>
            <Link href="/contact">Contato</Link>
          </nav>
          <div className="separator">
            <div></div>
          </div>
          <nav className='social'>
            {
              author.media.map((item, index) => (
                <a key={item.type} href={item.url} target="_blank" rel="noreferrer">
                  {item.icon()}
                </a>
              ))
            }
          </nav>
        </footer>
      </div>
    </>
  )
}

